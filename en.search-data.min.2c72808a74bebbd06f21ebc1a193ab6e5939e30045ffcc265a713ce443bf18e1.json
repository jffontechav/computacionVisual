[{"id":0,"href":"/computacionVisual/docs/Talleres/Taller1/","title":"Taller1","section":"Talleres","content":" taller 1 # Types # Editor En esta sección está el editor de imagenes de luminosidad y visualización de histogramas de imagenes. Kernels # Un kernel o máscara de convolución puede entenderse como una matriz de coeficientes que al ser aplicada en un pixel objetivo (considérese el pixel como un punto (x,y) del plano) obteniendo una transformación en el pixel objetivo como en sus vecinos (entendiendo la transformación como la imagen G(x,y) en todos ellos). El filtro examina, sucesivamente, cada píxel de la imagen. Visualilusions Dentro de la percepción visual, una ilusión óptica es una ilusión causada por el sistema visual y caracterizada por una percepción visual que parece diferir de la realidad. Ilusiones visuales Las ilusiones son muy variadas; su categorización es difícil porque la causa subyacente no suele estar clara, pero una clasificación propuesta por Richard Gregory es útil como orientación. Según ésta, hay tres clases principales: ilusiones físicas, fisiológicas y cognitivas, y en cada clase hay cuatro tipos: Ambigüedades, distorsiones, paradojas y ficciones. "},{"id":1,"href":"/computacionVisual/docs/Talleres/Taller1/editor/","title":"Editor","section":"Taller1","content":"En esta sección está el editor de imagenes de luminosidad y visualización de histogramas de imagenes.\nKernels # Un kernel o máscara de convolución puede entenderse como una matriz de coeficientes que al ser aplicada en un pixel objetivo (considérese el pixel como un punto (x,y) del plano) obteniendo una transformación en el pixel objetivo como en sus vecinos (entendiendo la transformación como la imagen G(x,y) en todos ellos).\nEl filtro examina, sucesivamente, cada píxel de la imagen. Para cada uno de ellos, que llamaremos “píxeles iniciales”, se multiplica el valor de este píxel y el valor de los 8 circundantes por el valor correspondiente del kernel. Entonces se añade el resultado, y el píxel inicial se regula en este valor resultante final.\nSe encuentran de manera aleatoria, los valores de la matriz 3x3 que definen el kernel.\nBrightness # El brillo de la imagen (o brillo luminoso) es una medida de la intensidad después de que la imagen haya sido adquirida con una cámara digital o digitalizada por un convertidor de analógico a digital.\nEn este cado la luminosidad se calcula respecto a la posición del cursor , entre mas cerca, mas luminoso es, entre mas lejos menos.\n"},{"id":2,"href":"/computacionVisual/docs/Talleres/Taller1/visualilusions/","title":"Visualilusions","section":"Taller1","content":"Dentro de la percepción visual, una ilusión óptica es una ilusión causada por el sistema visual y caracterizada por una percepción visual que parece diferir de la realidad.\nIlusiones visuales Las ilusiones son muy variadas; su categorización es difícil porque la causa subyacente no suele estar clara, pero una clasificación propuesta por Richard Gregory es útil como orientación.\nSegún ésta, hay tres clases principales: ilusiones físicas, fisiológicas y cognitivas, y en cada clase hay cuatro tipos: Ambigüedades, distorsiones, paradojas y ficciones.\nEfecto Optico 1 # ¿QUE VES? Efecto Optico 2 # Conclusión Se requirio el desarrollo e implementacion de programas que utilizaran P5 para mostrar ilusiones opticas, kernels, luminocidad, asi como otros atributos asociados a la alteracion o comprension de imagenes.\nPara el desarrollo de las ilusiones opticas se implementó una adaptacion de codigos hechos por \u0026ldquo;Computing Masterclass\u0026rdquo; en la que se alteró la forma, tamaño y la velocidad de las mismas para obtener resultados diferentes que mantuvieran las propiedades que les permite presentar una percepcion alterada del fenoeno que se esta mostrando.\nEn la primera ilusion optica se utilizan elipses rotando con respecto a un centro con un grosor y velocidad dados para aparentar la ilusion de espirales en pantalla.\nEn la segunda ilusion se utilizan circulos rodeados por lineas curvas de diferente coloracion con un ovimiento constante para aparentar la rotacion de circulo mismo.\nCon el Kernel se utilizo un recuadro asociado a la posicion del cursor sobre el cual se generaba la transformacion de la imagen, se tenía un boton para aleatorizar los valores del kernel y observar como estos cambios afectaban la alteracion de la imagen. Se concluyó que la implementacion de diferentes metodos de alteracion de imagenes pueden ser implementados en puntos fijos o asociados a ciertos factores para general los resultados deseados, y que conocer como percibimos objetos y el espacio es fundamental para modelar y generar resultados que expresen o visualizen al usuario las ideas deseadas.\n"},{"id":3,"href":"/computacionVisual/docs/Talleres/Taller2/","title":"Taller2","section":"Talleres","content":" taller 2 # Types # Solar System Sistema Solar # Para este proyecto nos queremos enfocar en los conceptos que nos permitieron desarrollar este sistema solar. Pila de transformaciones # Primero tenemos la pila de transformaciones. Esta pila, se refiere a la forma en la que se anidan los objetos con el proposito de conseguir las transformaciones deseadas. Push() y Pop() # Push() es una función que nos ayuda a guardar los cambios que hacemos despues de que se usa y pop() ayuda a reestablecer las condiciones a como estaban antes del push(). "},{"id":4,"href":"/computacionVisual/docs/Talleres/Taller2/solarSystem/","title":"Solar System","section":"Taller2","content":" Sistema Solar # Para este proyecto nos queremos enfocar en los conceptos que nos permitieron desarrollar este sistema solar.\nPila de transformaciones # Primero tenemos la pila de transformaciones. Esta pila, se refiere a la forma en la que se anidan los objetos con el proposito de conseguir las transformaciones deseadas.\nPush() y Pop() # Push() es una función que nos ayuda a guardar los cambios que hacemos despues de que se usa y pop() ayuda a reestablecer las condiciones a como estaban antes del push().\nComo consecuencia todo lo que quede en medio de un push() y un pop() tendra las mismas caracterizaciones y movimientos.\nDe esta forma es posible crear las pilas de transformaciones.En el caso de un planeta que tiene una luna orbitando alrededor de el, debemos crear un push() y un pop() globales, que representaran al planeta y dentro de estos, hacemos otro push() y pop() que represente a la luna, de este modo cualquier transformación que afecte al planeta, tambien afectará a la luna.\nRotación # Usamos la función Rotate() a la cual se le pasa como parametro, un angulo de rotación respecto a un centro. Para rotar un objeto en particular alrededor de su propio origen, debe trasladar ese origen, luego realizar la rotación y luego dibujar el objeto.\nTraslación # Usamos la función Translate() la cual recibe como parametro 3 coordenadas x, y, z. De estas coordenadas en nuestro caso, solo se define x y será el coseno de el angulo propio de el objeto. La cual creará la orbita al rededor de el objeto central.\nEl todo # Se desarrollo un modelo simplificado del sistema solar para mostrar las propiedades de rotacion, translacion y pila de trasformaciones.\nEn el progama se tiene una represetacion de Mercurio con una orbita irregular alrededor der sol en mas de un eje, la Tierra posee una luna mientras que Marte posee dos, ambas con diferentes orbitas y velocidades de trancito, asi como Saturno con sus anillos y los demas planetas del sistema solar.\nSe genero el sol en el eje original y se generaron transforaciones para cada planeta, dentro de estas se generaron mas en caso de que tubieran lunas, estos tienen su propia rotacion con respecto a su eje asi como una rotacion con respecto a la tranforacion anterior, lo que genera la orbita. Para los anillos tambien se implementaron transformaciones y translaciones a diferentes dictancias para generar el efecto deseado.\nConclusiones: # Para el desarrollo de modelamiento de objetos y movimiento se debe tener en cuenta los cambios y las geometrias que se tengan en la pila de transformaciones con respecto al todo. Las orientaciones deben ser consistentes entre los diferentes objetos del sistema para que la composicion se mantega, especialmente si se piensa hacer uso de diferentes texturas. A la hora de escalar tamaños se debe considerar las distancias asi como la facilidad con la que la camara puede captar los elementos de diferentes tamaños con sus respectivas posiciones. Cuando no se pueda alcanzar la complejidad de los modelos mas precisos se debe mantener ciertas aproximaciones que permitan generar un resultado que permita al usuario entender que se esta presentando.\n"}]